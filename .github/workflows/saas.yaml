# scan.yml

on: [push, pull_request]

name: Build and Scan for SaaS
env:
  # The Prisma Cloud user with the CI User role
  TL_USER: ${{ secrets.TL_USER }}
  # The password for this user account
  TL_PASS: ${{ secrets.TL_PASS }}
  # The base URL for the Console -- http://console.<my_company>.com:8083 -- without a trailing /
  TL_CONSOLE_URL:  https://us-west1.cloud.twistlock.com/us-3-159237940
  #CONTAINER_IMAGE: sgordon/latest:${{ github.sha }}
  CONTAINER_IMAGE: vinayvenkat/pcscan-latest:${{ github.sha }}

jobs:
  build-and-scan:
    name: Build and Scan for Vulnerabilities and Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@master
      
    - name: Download twistcli from Prisma Cloud Console
      run: |
        curl -k -u $TL_USER:$TL_PASS --output ./twistcli $TL_CONSOLE_URL/api/v1/util/twistcli
        # ...and ensure it's executable.
        sudo chmod a+x ./twistcli
      
    - name: Build and tag the image
      run: docker build -t $CONTAINER_IMAGE .
    
    - name: Scan the image
      run: |
        # Run the scan with twistcli
        # pushing the results to the Prisma Cloud console.
        # --details returns all vulnerabilities & compliance issues rather than just summaries.
        # --address points to our Prisma Cloud console
        # --user and --password provide credentials for the console.  These creds only need the CI User role.
        # Finally, we provide the name of the image we built with 'docker build', above.
        ./twistcli images scan --details --address $TL_CONSOLE_URL --user $TL_USER --password $TL_PASS $CONTAINER_IMAGE
        # Add --vulnerability-threshold and/or --compliance-threshold to this command to
        # fail builds based on the thresholds.
        # See twistcli documentation for more details.
  
  # add any additional jobs/steps needed to test the image, push to a registry, etc.
